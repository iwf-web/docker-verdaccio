#
# This is the default configuration file. It allows all users to do anything,
# please read carefully the documentation and best practices to
# improve security.
#
# Do not configure host and port under `listen` in this file
# as it will be ignored when using docker.
# see https://verdaccio.org/docs/en/docker#docker-and-custom-port-configuration
#
# Look here for more config file examples:
# https://github.com/verdaccio/verdaccio/tree/5.x/conf
#
# Read about the best practices
# https://verdaccio.org/docs/best

# https://verdaccio.org/docs/configuration#storage
# path to a directory with all packages
# "./storage" will go to "/verdaccio/conf/storage"
# Setting this is mandatory, even when using minio, otherwise verdaccio won't boot
storage: /verdaccio/storage
# path to a directory with plugins to include
plugins: /verdaccio/plugins

# https://verdaccio.org/docs/webui
web:
  title: IWF NPM Proxy (Verdaccio)

# https://verdaccio.org/docs/configuration#authentication
auth:
  gitlab:
    url: https://git.iwf.io
    # https://github.com/bufferoverflow/verdaccio-gitlab?tab=readme-ov-file#publish
    #publish = $maintainer

store:
  # https://github.com/verdaccio/monorepo/tree/main/plugins/aws-s3-storage
  aws-s3-storage:
    bucket: AWS_S3_BUCKET
    #keyPrefix: S3_KEY_PREFIX # optional, has the effect of nesting all files in a subdirectory
    region: AWS_DEFAULT_REGION # optional, will use aws s3's default behavior if not specified
    endpoint: AWS_S3_ENDPOINT # optional, will use aws s3's default behavior if not specified
    s3ForcePathStyle: AWS_S3_PATH_STYLE # optional, will use path style URLs for S3 objects
    #tarballACL: private # optional, use public-read to work with CDN like Amazon CloudFront
    accessKeyId: AWS_ACCESS_KEY_ID # optional, aws accessKeyId for private S3 bucket
    secretAccessKey: AWS_SECRET_ACCESS_KEY # optional, aws secretAccessKey for private S3 bucket
    #sessionToken: S3_SESSION_TOKEN # optional, aws sessionToken for private S3 bucket
    #proxy: HTTPS_PROXY # optional, HTTP or HTTPS proxies if you can't connect to internet directly

# https://verdaccio.org/docs/configuration#uplinks
# a list of other known repositories we can talk to
uplinks:
  npmjs:
    url: https://registry.npmjs.org/

# Learn how to protect your packages
# https://verdaccio.org/docs/protect-your-dependencies/
# https://verdaccio.org/docs/configuration#packages
# https://verdaccio.org/docs/best#strong-package-access-with-authenticated
packages:
  # not having this is a security issue, since anyone could publish a package on
  # our name and we would use it instead of our internal package
  '@iwf-web/*':
    access: $all # TODO: We should move to $authenticated, but that breaks too many processes
    publish: $authenticated
    #unpublish: admin
    #gitlab: true
  '@coala/*':
    access: $all # TODO: We should move to $authenticated, but that breaks too many processes
    publish: $authenticated
    #unpublish: admin
    #gitlab: true
  # scoped packages
  '@*/*':
    access: $all # TODO: We should move to $authenticated, but that breaks too many processes
    proxy: npmjs
  '**':
    # allow all users (including non-authenticated users) to read
    # you can specify usernames/groupnames (depending on your auth plugin)
    # and three keywords: "$all", "$anonymous", "$authenticated"
    access: $all # TODO: We should move to $authenticated, but that breaks too many processes
    # allow all known users to publish/unpublish packages
    # (anyone can register by default, remember?)
    #publish: $authenticated
    # if package is not available locally, proxy requests to 'npmjs' registry
    proxy: npmjs

# To improve your security configuration and  avoid dependency confusion
# consider removing the proxy property for private packages
# https://verdaccio.org/docs/best#remove-proxy-to-increase-security-at-private-packages

# https://verdaccio.org/docs/configuration#server
# You can specify HTTP/1.1 server keep alive timeout in seconds for incoming connections.
# A value of 0 makes the http server behave similarly to Node.js versions prior to 8.0.0, which did not have a keep-alive timeout.
# WORKAROUND: Through given configuration you can workaround following issue https://github.com/verdaccio/verdaccio/issues/301. Set to 0 in case 60 is not enough.
#server:
#  keepAliveTimeout: 60

# https://verdaccio.org/docs/configuration#offline-publish
# publish:
#   allow_offline: false

# https://verdaccio.org/docs/configuration#security
#security:
  #api:
  #  legacy: true # is enabled by default
  #  #jwt:
  #  #  sign:
  #  #    expiresIn: 29d
  #web:
  #  legacy: true
  #  sign:
  #    expiresIn: 7d # 1 hour by default

# https://verdaccio.org/docs/configuration#user-rate-limit
# userRateLimit:
#   windowMs: 50000
#   max: 1000

# https://verdaccio.org/docs/configuration#max-body-size
# max_body_size: 10mb

# https://verdaccio.org/docs/configuration#notifications
# notify:
#   method: POST
#   headers: [{ "Content-Type": "application/json" }]
#   endpoint: https://usagge.hipchat.com/v2/room/3729485/notification?auth_token=mySecretToken
#   content: '{"color":"green","message":"New package published: * {{ name }}*","notify":true,"message_format":"text"}'

middlewares:
  # To use `npm audit`
  audit:
    enabled: true

# https://verdaccio.org/docs/logger
# log settings
log:
  - { type: stdout, format: pretty, level: trace, colors: true }
experiments:
  # support for npm token command
  token: true

# translate your registry, api i18n not available yet
i18n:
  # list of the available translations https://github.com/verdaccio/verdaccio/blob/master/packages/plugins/ui-theme/src/i18n/ABOUT_TRANSLATIONS.md
  # https://github.com/verdaccio/verdaccio/blob/master/packages/plugins/ui-theme/src/i18n/enabledLanguages.ts
  web: de-DE
