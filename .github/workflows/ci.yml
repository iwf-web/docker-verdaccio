name: CI

on:
  #schedule:
  #  - cron: '21 1 * * *'
  #push:
  #  # Publish latest or develop branch as prerelease.
  #  branches: [ main, develop ]
  #  # Publish semver tags as releases.
  #  tags: [ '*.*.*' ]
  #  # and only if one of these files changed.
  #  paths:
  #    - .github/workflows/ci.yml
  #    - 'src/**'
  #pull_request:
  #  branches: [ main ]
  workflow_dispatch:

jobs:
  #matrix-build:
  #  name: Generate job matrix
  #  runs-on: ubuntu-latest
  #  outputs:
  #    matrix: ${{ steps.set-matrix.outputs.matrix }}
  #  steps:
  #    - uses: iwf-web/docker-base-image-version-ci-matrix-action@v1
  #      id: set-matrix
  #      with:
  #        base-image: verdaccio/verdaccio
  #    - id: set-matrix
  #      run: echo "matrix={\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}" >> $GITHUB_OUTPUT

  build:
    #needs: matrix-build
    runs-on: ubuntu-latest
    #strategy:
    #  matrix: ${{ fromJSON(needs.matrix-build.outputs.matrix) }}

    env:
      dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      #- run: echo "Matrix - Project ${{ matrix.project }}, Config ${{ matrix.config }}"

      - uses: actions/checkout@v5

      # Install the cosign tool except on PR
      - uses: sigstore/cosign-installer@v3
        if: github.event_name != 'pull_request'
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      - uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      - uses: docker/login-action@v3
        if: github.event_name != 'pull_request' && vars.DOCKERHUB_USERNAME != '' && env.dockerhub_token != ''
        with:
          # Username and password (or personal access token if using 2FA) for Docker Hub login
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ vars.IMAGE_NAME }}
          flavor: |
            latest=true

      # Build and push Docker image with Buildx (don't push on PR)
      - uses: docker/build-push-action@v6
        id: build-and-push
        with:
          file: src/Dockerfile
          platforms: linux/amd64,linux/arm64 # same as base image
          pull: true
          #push: ${{ github.event_name != 'pull_request' && vars.DOCKERHUB_USERNAME != '' && env.dockerhub_token != '' }}
          sbom: true # provenance is already at =max by default on public repos
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data. If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      #- name: Sign the published Docker image
      #  if: ${{ github.event_name != 'pull_request' && vars.DOCKERHUB_USERNAME != '' && env.dockerhub_token != '' }}
      #  env:
      #    # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
      #    TAGS: ${{ steps.meta.outputs.tags }}
      #    DIGEST: ${{ steps.build-and-push.outputs.digest }}
      #  # This step uses the identity token to provision an ephemeral certificate
      #  # against the sigstore community Fulcio instance.
      #  run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
